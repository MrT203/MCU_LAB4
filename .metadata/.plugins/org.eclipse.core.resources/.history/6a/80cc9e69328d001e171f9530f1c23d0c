/*
 * scheduler.c
 *
 *  Created on: Nov 23, 2023
 *      Author: Administrator
 */
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t currentID = 0;

void SCH_Init(void){
//    unsigned char i;
//    for (i = 0; i < SCH_MAX_TASKS; i++){
//        SCH_Delete_Task(i);
//    }
//    // Reset the global e r ro r v a ri abl e
//    // − SCH_Delete_Task ( ) will generate an e r ro r code ,
//    // ( because the task array i s empty)
////    Error_code_G = 0;
//    // Timer_init( );
//    // Watchdog_init( );
	currentID = 0;

}

void SCH_Update(void){
    unsigned char Index;
    // NOTE: c alcul a tions are in *TICKS* ( not milliseconds )
    for (Index  = 0; Index < SCH_MAX_TASKS; Index++){
        // Check i f there i s a task a t t hi s loca tion
        if (SCH_tasks_G[Index].pTask){
            if (SCH_tasks_G[Index].Delay == 0){
                // The task i s due to run
                // Inc . the ’RunMe’ fl a g
                SCH_tasks_G[Index].Runme += 1;
                if (SCH_tasks_G[Index].Period){
                    // Schedule periodic tasks to run again
                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
                }

            } else {
                // Not ye t ready to run : j u s t decrement the delay
                SCH_tasks_G[Index].Delay -= 1;
            }
        }
    }
}

uint8_t SCH_Add_Task(void (*pFunction)(void), unsigned int DELAY, unsigned int PERIOD){
	DELAY /= TICK;
	PERIOD /= TICK;
	uint8_t Index = 0;
    // Fi r s t find a gap in the array ( i f there i s one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
        Index++;
    }
    // Have we reached the end o f the l i s t ?
    if (Index == SCH_MAX_TASKS){
        // Task l i s t i s f u l l
        // Set the global e r ro r v a ri abl e
        // Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
        // Also return an e r ro r code
        return SCH_MAX_TASKS;
    }
    // I f we ’re here , there i s a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
    SCH_tasks_G[Index].Delay = DELAY;
    SCH_tasks_G[Index].Period = PERIOD;
    SCH_tasks_G[Index].Runme = 0;
    SCH_tasks_G[Index].taskID = currentID;
    currentID++;
    // return posi tion o f task ( to allow l a t e r dele tion )
    return Index ;
}

void SCH_Dispatch_Tasks(void){
    unsigned char Index;
    // Dispatches (runs ) the next task ( i f one i s ready )
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
        // Co task can thuc hien
        if (SCH_tasks_G[Index].Runme > 0){
            (*SCH_tasks_G[Index].pTask)(); // Run the task
            SCH_tasks_G[Index].Runme -= 1; // Reset / Reduce  Runme Flag
            // Periodic tasks will au toma tically run again
            // − i f t hi s i s a ’one shot ’ task , remove i t from the array
            if (SCH_tasks_G[Index].Period == 0){
                SCH_Delete_Task(Index);
            }
        }
    }
    // // Report system s t a tus
    // SCH_Report_Status();
    // // The scheduler en ters i dl e mode a t t hi s point
    // SCH_Go_To_Sleep();
}

//uint8_t SCH_Delete_Task(const uint8_t TASK_INDEX){
//    unsigned char Return_code;
//    if (TASK_INDEX > currentID) return TASK_INDEX;
//    if (SCH_tasks_G[TASK_INDEX].pTask == 0){
//        // No task a t t hi s loca tion . . .
//        //
//        // Set the global e r ro r v a ri abl e
//        // Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK
//        // . . . also return an e r ro r code
//        // Return_code = RETURN_ERROR;
//    } else {
//        // Return_code = RETURN_NORMAL;
//    }
//    SCH_tasks_G[TASK_INDEX].pTask = 0x0000 ;
//    SCH_tasks_G[TASK_INDEX].Delay = 0;
//    SCH_tasks_G[TASK_INDEX].Period = 0;
//    SCH_tasks_G[TASK_INDEX].Runme = 0;
//    for (uint8_t id = TASK_INDEX+1; id<currentID; id++)
//    		SCH_tasks_G[id].taskID -= 1;
//    return TASK_INDEX;
//    return Return_code ; // return status
//}

uint8_t SCH_Delete_Task(const uint8_t TASK_INDEX) {
	if (TASK_INDEX>currentID)
		return TASK_INDEX;
	    SCH_tasks_G[TASK_INDEX].pTask = 0x0000 ;
	    SCH_tasks_G[TASK_INDEX].Delay = 0;
	    SCH_tasks_G[TASK_INDEX].Period = 0;
	    SCH_tasks_G[TASK_INDEX].Runme = 0;
	for (uint8_t id = TASK_INDEX+1; id<currentID; id++)
		SCH_tasks_G[id].taskID -= 1;
	return TASK_INDEX;
}
void SCH_Go_To_Sleep(){
    // todo: Optional
}

void SCH_Report_Status(void){
#ifdef SCH_REPORT_ERRORS
// ONLY APPLIES IF WE ARE REPORTING ERRORS
// Check fo r a new e r ro r code
    if (Error_code_G != Last_error_code_G) {
    // Negative l o gic on LEDs assumed
        Error_port = 255 − Error_code_G ;
        Last_error_code_G = Error_code_G ;
        if (Error_code_G != 0) {
            Error_tick_count_G = 60000;
        } else {
            Error_tick_count_G = 0;
        }
    } else {
        if (Error_tick_count_G != 0){
            if(−−Error_tick_count_G == 0) {
                Error_code_G = 0; // Reset e r ro r code
            }
        }
    }
#endif
}

